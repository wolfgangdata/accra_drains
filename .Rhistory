ii
liist <- list(c(0))
for (i in 1:(length(sewage)-1)) {
ii[i+1, ] <- coordinates(gIntersection(sewage[sewage$id2==combi[i, "a"], ], sewage[sewage$id2==combi[i, "b"], ]))
liist[i+1] <- i+1
}
ii <- data.frame("x" = c(-0.221109, NA), "y" = c(5.530075, NA))
liist <- list(c(NULL))
for (i in 1:(length(sewage)-1)) {
ii[i+1, ] <- coordinates(gIntersection(sewage[sewage$id2==combi[i, "a"], ], sewage[sewage$id2==combi[i, "b"], ]))
liist[i+1] <- i+1
}
ii$iter <- liist
ii
ii <- data.frame("x" = c(-0.221109, NA), "y" = c(5.530075, NA))
liist <- list(c(1))
for (i in 1:(length(sewage)-1)) {
ii[i+1, ] <- coordinates(gIntersection(sewage[sewage$id2==combi[i, "a"], ], sewage[sewage$id2==combi[i, "b"], ]))
liist[i+1] <- i+1
}
ii$iter <- liist
ii
lapply(slot(sewage, "lines"), function(x) lapply(slot(x, "Lines"),
function(y) slot(y, "coords")))
View(ii)
endpoints <- lapply(slot(sewage, "lines"), function(x) lapply(slot(x, "Lines"),
function(y) slot(y, "coords")))
endpoints[1]
do.call( rbind, endpoints)[,1]
do.call( rbind, endpoints)[1,]
lapply(endpoints, tail, n = 1L)
vapply(endpoints, tail, n = 1L, FUN.VALUE = numeric(1))
vapply(endpoints, tail, n = 1L)
endpoints
endpoints[1, ]
length(endpoints[1])
length(endpoints[31])
num(endpoints[31])
unlist(endpoints)
df <- data.frame(matrix(unlist(endpoints), nrow=132, byrow=T),stringsAsFactors=FALSE)
df <- data.frame(matrix(unlist(endpoints), nrow=1860, byrow=T),stringsAsFactors=FALSE)
View(df)
df <- data.frame(matrix(unlist(endpoints), nrow=1860),stringsAsFactors=FALSE)
df <- (matrix(unlist(endpoints), nrow=1860),stringsAsFactors=FALSE)
df <- (matrix(unlist(endpoints), nrow=1860, byrow=T),stringsAsFactors=FALSE)
do.call(rbind.data.frame, endpoints)
endpoints[1]
stack(endpoints[1])
stack(endpoints)
endpoints[1]
df <- data.frame(endpoints[1])
View(df)
points(-0.2211095, 5.530075)
df <- tail(data.frame(endpoints[1]), 1)
1:length(endpoints
1:length(endpoints)
df <- data.frame()
df[i, ] <- tail(data.frame(endpoints[i]), 1)
View(df)
tail(data.frame(endpoints[i]), 1)
df <- data.frame("lon" = c(-NA), "lat" = c(NA))
for (i in 1:length(endpoints)) {
df[i, ] <- tail(data.frame(endpoints[i]), 1)
}
View(df)
points(df)
View(df)
endpoints[i]
points(df[1], col = "red")
points(df[1,], col = "red")
points(df[2,], col = "red")
points(df[3,], col = "red")
points(df[4,], col = "red")
df$drain <- c(1:31)
points(df$drain==14, col = "red")
points(df$drain==14, col = "green")
points(df[df$drain==14,], col = "green")
points(df[df$drain==21,], col = "orange")
points(df[df$drain==19,], col = "orange")
points(df[df$drain==31,], col = "orange")
points(df[df$drain==31,], col = "red")
points(df[df$drain==18,], col = "red")
points(df[df$drain==30,], col = "red")
points(df[df$drain==15,], col = "red")
endpoints[15]
df[df$drain==15,]
points(df[df$drain==25,], col = "red")
points(-0.1789855, 5.600943)
points(--0.2179284, 5.569449)
points(-0.2179284, 5.569449)
points(-0.2179284, 5.569449, col="blue")
points(-0.2179284, 5.569449, col="orange")
tail(data.frame(endpoints[25]), 1)
tail(data.frame(endpoints[15]), 1)
head(data.frame(endpoints[15]), 1)
df <- data.frame("lon" = c(-NA), "lat" = c(NA))
for (i in 1:length(endpoints)) {
if (i == 15){
df[i, ] <- head(data.frame(endpoints[i]), 1)
} else {
df[i, ] <- tail(data.frame(endpoints[i]), 1)
}
}
df$drain <- c(1:31)
points(df[df$drain==15,], col = "red")
df[df$drain==15,]
points(df[df$drain==15,], col = "blue")
head(data.frame(endpoints[15]), 1)
tail(data.frame(endpoints[15]), 1)
points(df[df$drain==25,], col = "blue")
df[df$drain==25,]
tail(data.frame(endpoints[25]), 1)
head(data.frame(endpoints[25]), 1)
View(df)
data.frame(endpoints[25])
points(-0.2417755, 5.650688, col="orange")
points(-0.2282313, 5.632973, col="orange")
df <- data.frame("lon" = c(-NA), "lat" = c(NA))
for (i in 1:length(endpoints)) {
if (i == 15 & i == 25){
df[i, ] <- head(data.frame(endpoints[i]), 1)
} else {
df[i, ] <- tail(data.frame(endpoints[i]), 1)
}
}
df$drain <- c(1:31)
points(df, col = "blue")
plot(sewage, col = "blue", axes=TRUE)
df <- SpatialPointsDataFrame(df[c("lon", "lat")],
data.frame(ID=seq(1:nrow(df)), ID2="id2"),
proj4string=CRS("+proj=longlat +datum=WGS84"))
points(df, col = "orange")
df <- data.frame("lon" = c(-NA), "lat" = c(NA))
for (i in 1:length(endpoints)) {
if (i == 15 & i == 25){
df[i, ] <- head(data.frame(endpoints[i]), 1)
} else {
df[i, ] <- tail(data.frame(endpoints[i]), 1)
}
}
df$drain <- c(1:31)
points(-0.2282313, 5.632973, col="green")
head(data.frame(endpoints[25]), 1)
tail(data.frame(endpoints[25]), 1)
tail(data.frame(endpoints[25]), 1)
points(-0.2417755, 5.650688, col="green")
points(df[df$drain==9,], col = "blue")
points(df[df$drain==10,], col = "blue")
points(df, col = "blue")
with(df, text(df, labels = df$drain))
plot(sewage, col = "blue", axes=TRUE)
points(-0.2282313, 5.632973, col="green")
df <- data.frame("lon" = c(-NA), "lat" = c(NA))
for (i in 1:length(endpoints)) {
if (i == 15 & i == 25){
df[i, ] <- head(data.frame(endpoints[i]), 1)
} else {
df[i, ] <- tail(data.frame(endpoints[i]), 1)
}
}
df$drain <- c(1:31)
df <- data.frame("lon" = c(-NA), "lat" = c(NA))
for (i in 1:length(endpoints)) {
if (i == 15 | i == 25){
df[i, ] <- head(data.frame(endpoints[i]), 1)
} else {
df[i, ] <- tail(data.frame(endpoints[i]), 1)
}
}
df$drain <- c(1:31)
points(df, col = "blue")
pts.drain.int <- data.frame("lon" = c(-NA), "lat" = c(NA))
for (i in 1:length(endpoints)) {
if (i == 15 | i == 25){
pts.drain.int[i, ] <- head(data.frame(endpoints[i]), 1)
} else {
pts.drain.int[i, ] <- tail(data.frame(endpoints[i]), 1)
}
}
pts.drain.int$drain <- c(1:31)
drain.int.pts <- data.frame(matrix(NA, nrow=1, ncol=4))
colnames(drain.int.pts) <- c("id", "lon", "lat", "drain")
drain.int.pts <- data.frame("lon" = c(-0.221109), "lat" = c(5.530075), "id2" = c(0))
drain.int.pts <- SpatialPointsDataFrame(drain.int.pts[c("lon", "lat")],
data.frame(ID=seq(1:nrow(drain.int.pts)), ID2="id2"),
proj4string=CRS("+proj=longlat +datum=WGS84"))
plot(drain.int.pts)
drain.int.pts <- data.frame("lon" = c(-0.221109), "lat" = c(5.530075), "id2" = c(0))
plot(drain.int.pts)
points(drain.int.pts)
points(drain.int.pts)
source(paste0(getwd(), "/", "helper_length_calc.R"))
pts.neigh.drain.sp$ID2 #intersect with which drain id
dist2sewagedf.adj <- dist2sewagedf %>% filter(!distance > 1500)
pts.neigh.drain <- SpatialPointsDataFrame(dist2sewagedf.adj[c("lon", "lat")],
data.frame(ID=seq(1:nrow(dist2sewagedf.adj)), ID2 = dist2sewagedf.adj$ID2),
proj4string=CRS("+proj=longlat +datum=WGS84"))
pts.neigh.drain.sp <- spTransform(pts.neigh.drain, CRS( "+init=epsg:32630" ))
pts.neigh.drain.sp$ID2 #intersect with which drain id
pts.neigh.drain.sp
points(endpoint.proj.sp, col = "red")
endpoint <- data.frame("lon" = c(-0.221109), "lat" = c(5.530075))
endpoint.proj <- SpatialPointsDataFrame(endpoint[c("lon", "lat")],
data.frame(ID=seq(1:nrow(endpoint))),
proj4string=CRS("+proj=longlat +datum=WGS84"))
points(endpoint.proj.sp, col = "red")
endpoint.proj.sp <- spTransform(endpoint.proj, CRS( "+init=epsg:32630" ))
points(endpoint.proj.sp, col = "red")
endpoint
endpoint.proj
endpoint <- data.frame("lon" = c(-0.221109), "lat" = c(5.530075))
points(endpoint, col = "red")
endpoint <- data.frame("lon" = c(-0.221109), "lat" = c(5.530075))
endpoint.proj <- SpatialPointsDataFrame(endpoint[c("lon", "lat")],
data.frame(ID=seq(1:nrow(endpoint))),
proj4string=CRS("+proj=longlat +datum=WGS84"))
endpoint.proj.sp <- spTransform(endpoint.proj, CRS( "+init=epsg:32630" ))
gDistance(endpoint.proj.sp, pts.neigh.drain.sp[1,])
test.points <- data.frame("lon" = c(-0.221109, -0.2196986), "lat" = c(5.530075, 5.538641))
test.points <- SpatialPointsDataFrame(test.points[c("lon", "lat")],
data.frame(ID=seq(1:nrow(test.points))),
proj4string=CRS("+proj=longlat +datum=WGS84"))
test.points.sp <- spTransform(test.points, CRS( "+init=epsg:32630" ))
d11 <- gDistance(test.points.sp[1,], test.points.sp[2,]) # distance between two points
sewage.length <- c()
test.points.projected <- spTransform(test.points.sp, CRS( "+init=epsg:32630" ))
test.circles.projected <- gBuffer(test.points.projected[1,], width=d11, byid=TRUE)
sewage.length <- line.length(the.sewage.projected, test.circles.projected)
points(pts.neighb.sp, col="red", cex=1)
points(pts.neigh.drain.sp, col="red", cex=1)
#################################################################################
# Drains & Neighborhoods - Accra, Ghana
#################################################################################
#################################################################################
# To Do:
#       [x] define end point of drains
#       [x] define levels of drains (1,2,3) in ArcGIS and simplify network
#       [ ] identify which level/ id of drain the point connects to
#       [x] d0 ... distance from neighborhood to first intersection of drain
#       [ ] d3 ... distance from crosspoint to crosspoint on level 3
#       [ ] d2 ... distance from crosspoint to crosspoint on level 2
#       [x] d1 ... distance from crosspoint to endpoint on level 1
#       [ ] distance from neighborhood to first intersection of drain
#       [ ] buffer calc... line segment length (andrew's function)
#       [x] calculate intersection points of each drain segment
#       [x] calc cut - length of drain
#       [ ] ^^ loop
#       [ ] calc distance from intersection to end point of drain, along drain.
#       [ ] define flow of water?
#       [ ] some kind of network analysis?
#################################################################################
library(rgdal)
library(raster)
library(rgeos)
library(geosphere)
library(dplyr)
setwd("H:/GitHub/accra_drains/")
source(paste0(getwd(), "/", "helper_length_calc.R"))
# data abreviations
# .sp ... spatially adjusted with spTransform
# .prj ... projected with CRS("+init=epsg:32630")
# load data ----
# waterways
sewage <- shapefile(paste0(getwd(), "/shapefiles/waterways/", "accra_waterw_con_ed_level_4.shp"))
sewage <- spTransform(sewage, CRS("+proj=longlat +datum=WGS84"))
sewage <- sewage[order(sewage@data$id2), ]
# neighborhood weighted mid point
neighbcoord <- read.csv(paste0(getwd(), "/data/", "points_coordinates_output.csv"), sep = ",")
# neighborhood shape file
ama <- shapefile(paste0(getwd(), "/shapefiles/neighborhood/", "AMA_projected.shp"))
ama <- spTransform(ama, CRS("+proj=longlat +datum=WGS84"))
# calculations ----
dat0 <- neighbcoord
# neighborhoods
pts.neighb.sp <- SpatialPointsDataFrame(dat0[, c("lon", "lat")], data.frame(ID=seq(1:nrow(dat0))),
proj4string=CRS("+proj=longlat +datum=WGS84"))
sewage.prj <- spTransform(sewage, CRS("+init=epsg:32630"))
# sewage.length <- c()
# for (i in 1:length(pts.neighb.sp[ ,1])) {
#         the.points.projected <- spTransform(pts.neighb.sp[i, ], CRS( "+init=epsg:32630" ))
#         the.circles.projected <- gBuffer(the.points.projected, width=100, byid=TRUE)
#         sewage.length[i] <- line.length(the.sewage.projected, the.circles.projected)
# }
# distance to sewage + intersection point (shortest way to line)
dist2sewagedf <- data.frame(matrix(NA, nrow=1, ncol=4))
colnames(dist2sewagedf) <- c("distance", "lon", "lat", "ID2") #ID2 is the feature (drain part) it intersects with
for (i in 1:length(dat0[ ,1])) {
dist2sewagedf[i, ] <- rbind(dist2Line(dat0[i, c("lon", "lat")], sewage)) #coordinates of intersection
}
dist2sewage <- dist2sewagedf$distance
# take out neighborhoods that are too far away
dist2sewagedf.adj <- dist2sewagedf %>% filter(!distance > 1500)
pts.neigh.drain <- SpatialPointsDataFrame(dist2sewagedf.adj[c("lon", "lat")],
data.frame(ID=seq(1:nrow(dist2sewagedf.adj)), ID2 = dist2sewagedf.adj$ID2),
proj4string=CRS("+proj=longlat +datum=WGS84"))
pts.neigh.drain.sp <- spTransform(pts.neigh.drain, CRS( "+init=epsg:32630" ))
pts.neigh.drain.sp$ID2 #intersect with which drain id
# endpoint
# points(-0.221109, 5.530075, cex=1)
endpoint <- data.frame("lon" = c(-0.221109), "lat" = c(5.530075))
endpoint.proj <- SpatialPointsDataFrame(endpoint[c("lon", "lat")],
data.frame(ID=seq(1:nrow(endpoint))),
proj4string=CRS("+proj=longlat +datum=WGS84"))
endpoint.proj.sp <- spTransform(endpoint.proj, CRS( "+init=epsg:32630" ))
# # plot ------
# plot(sewage, col = "blue", axes=TRUE)
# # plot(waterways, col = waterways$length)
# points(pts.neighb.sp, col="red", cex=1)
# points(intersec.points, col="green", cex=1)
#
# points(endpoint.proj, cex=1)
#
# distance NOT along the drain (in meters)
gDistance(endpoint.proj.sp, pts.neigh.drain.sp[1,])
# # test draw, level of drains
# plot(sewage[sewage$level==1, ], col = "blue", axes=TRUE)
# plot(sewage[sewage$level==2, ], col = "green", axes=TRUE, add=TRUE)
# plot(sewage[sewage$level==3, ], col = "brown", axes=TRUE, add=TRUE)
#
# plot(sewage[sewage$level==1, ], col = "blue", axes=TRUE)
# plot(sewage[sewage$id2==1, ], col = "red", axes=TRUE, add=TRUE)
# plot(sewage[sewage$id2==31, ], col = "orange", axes=TRUE, add=TRUE)
# sample run
# points(intersec.points[intersec.points$ID==45, ], col = "blue")
# points(-0.2196986,5.538641, col="red", cex=1) #ID 45
#
# points(-0.221109, 5.530075, cex=1) #endpoint
test.points <- data.frame("lon" = c(-0.221109, -0.2196986), "lat" = c(5.530075, 5.538641))
test.points <- SpatialPointsDataFrame(test.points[c("lon", "lat")],
data.frame(ID=seq(1:nrow(test.points))),
proj4string=CRS("+proj=longlat +datum=WGS84"))
test.points.sp <- spTransform(test.points, CRS( "+init=epsg:32630" ))
d11 <- gDistance(test.points.sp[1,], test.points.sp[2,]) # distance between two points
sewage.length <- c()
test.points.projected <- spTransform(test.points.sp, CRS( "+init=epsg:32630" ))
test.circles.projected <- gBuffer(test.points.projected[1,], width=d11, byid=TRUE)
sewage.length <- line.length(the.sewage.projected, test.circles.projected)
sewage.length <- line.length(sewage, test.circles.projected)
sewage.length <- line.length(sewage.prj, test.circles.projected)
points(pts.neigh.drain.sp, col="red", cex=1)
sewage.length
points(d11)
points(d11, col = "orange")
points(test.points, col = "orange")
points(intersec.points, col = "blue")
pts.neigh.drain.sp
points(pts.neigh.drain.sp, col = "blue")
points(pts.neigh.drain, col = "blue")
points(pts.neigh.drain, col = "orange")
with(pts.neigh.drain, text(pts.neigh.drain, labels = pts.neigh.drain$ID))
points(pts.neigh.drain[pts.neigh.drain$ID==48, ], col = "blue")
points(pts.neigh.drain[pts.neigh.drain$ID==48, ], col = "red")
pts.neigh.drain[pts.neigh.drain$ID==48, ]
p.48 <- pts.neigh.drain[pts.neigh.drain$ID==48, ]
points(test.points, col = "orange")
points(pts.neigh.drain, col = "orange")
plot(sewage, col = "blue", axes=TRUE)
points(pts.neigh.drain, col="green", cex=1)
points(pts.neigh.drain[pts.neigh.drain$ID==48, ], col = "red")
endpoints <- lapply(slot(sewage, "lines"), function(x) lapply(slot(x, "Lines"), function(y) slot(y, "coords")))
pts.drain.int <- data.frame("lon" = c(-NA), "lat" = c(NA))
for (i in 1:length(endpoints)) {
if (i == 15 | i == 25){
pts.drain.int[i, ] <- head(data.frame(endpoints[i]), 1)
} else {
pts.drain.int[i, ] <- tail(data.frame(endpoints[i]), 1)
}
}
pts.drain.int$drain <- c(1:31)
points(pts.drain.int, col="green", cex=1)
points(pts.drain.int, col="red", cex=1)
with(pts.drain.int, text(pts.drain.int, labels = pts.drain.int$drain))
pts.drain.int
plot(sewage, col = "blue", axes=TRUE)
points(pts.drain.int, col="red", cex=1)
pts.drain.int
points(pts.drain.int[pts.drain.int$drain==2, ], col = "blue")
gIntersection(p.48,sewage)
gIntersection(p.48, sewage$id2==1)
gIntersection(p.48, sewage[sewage$id2==1, ])
sewage[sewage$id2==1, ]
gIntersection(p.48, sewage[sewage$id2==2, ])
p.48
points(pts.neigh.drain[pts.neigh.drain$ID==48, ], col = "red")
points(pts.neigh.drain, col="green", cex=1)
points(pts.neigh.drain[pts.neigh.drain$ID==48, ], col = "red")
gIntersection(p.48, sewage[sewage$id2==3, ])
gIntersection(p.48, sewage[sewage$id2==4, ])
points(pts.drain.int, col="red", cex=1)
points(pts.drain.int[pts.drain.int$drain==2, ], col = "blue")
points(pts.neigh.drain[pts.neigh.drain$ID==48, ], col = "orange")
gIntersection(p.48, sewage[sewage$id2==4, ], byid = TRUE)
gIntersection(p.48, sewage[sewage$id2==3, ], byid = TRUE)
gIntersection(p.48, sewage, byid = TRUE)
p.48
sewage
plot(sewage[sewage$id2==3, ])
points(p.48)
plot(pts.drain.int[pts.drain.int$drain == 2, ])
plot(sewage[sewage$id2==3, ])
points(p.48)
points(pts.drain.int[pts.drain.int$drain == 2, ])
points(pts.drain.int[pts.drain.int$drain == 3, ])
p.48 <- SpatialPointsDataFrame(p.48[c("lon", "lat")],
data.frame(ID=seq(1:nrow(test.points))),
proj4string=CRS("+proj=longlat +datum=WGS84"))
p.48 <- spTransform(p.48, CRS( "+init=epsg:32630" ))
p.48 <- pts.neigh.drain[pts.neigh.drain$ID==48, ]
p.48 <- SpatialPointsDataFrame(p.48[c("lon", "lat")],
data.frame(ID=seq(1:nrow(p.48))),
proj4string=CRS("+proj=longlat +datum=WGS84"))
p.48
p.48 <- spTransform(p.48, CRS( "+init=epsg:32630" ))
gIntersection(p.48, sewage[sewage$id2==3, ], byid = TRUE)
p.48 <- pts.neigh.drain[pts.neigh.drain$ID==48, ]
gIntersection(p.48, sewage[sewage$id2==3, ], byid = TRUE)
p.48 <- SpatialPointsDataFrame(p.48[c("lon", "lat")],
data.frame(ID=seq(1:nrow(p.48))),
proj4string=CRS("+proj=longlat +datum=WGS84"))
1:nrow(p.48)
p.48 <- SpatialPointsDataFrame(p.48[c("lon", "lat")],
proj4string=CRS("+proj=longlat +datum=WGS84"))
p.48 <- pts.neigh.drain[pts.neigh.drain$ID==48, ]
p.48
p.48[c("lon", "lat")
p.48[c("lon", "lat")]
p.48 <- SpatialPointsDataFrame(p.48,
data.frame(ID=seq(1:nrow(p.48))),
proj4string=CRS("+proj=longlat +datum=WGS84"))
gIntersection(p.48, sewage[sewage$id2==3, ], byid = TRUE)
p.48 <- pts.neigh.drain[pts.neigh.drain$ID==48, ]
gIntersection(p.48, sewage, byid = TRUE)
gIntersection(sewage, p.48, byid = TRUE)
gIntersection(sewage[sewage$id2==3, ], p.48, byid = TRUE)
gIntersects(p.48, sewage[sewage$id2==3, ], byid = TRUE)
gIntersects(p.48, sewage, byid = TRUE)
gIntersects(pts.neigh.drain, sewage, byid = TRUE)
gIntersects(pts.drain.int, sewage, byid = TRUE)
gIntersects(p.48,  byid = TRUE)
gIntersects(p.48, sewage[sewage$id2==3, ], byid = TRUE)
gIntersects(p.48, sewage[sewage$id2==2, ], byid = TRUE)
gBuffer(p.48, width=10, byid=TRUE)
library(sf)
install.packages("sf")
install.packages("sf")
library(sf)
st_intersection(p.48, sewage[sewage$id2==3, ])
library(sf)
library("sf", lib.loc="~/R/R-3.4.0/library")
st_intersection(p.48, sewage[sewage$id2==3, ])
st_intersection(p.48, sewage[sewage$id2==3, ])
library(sf)
install.packages("udunits2")
library(sf)
st_intersection(p.48, sewage[sewage$id2==3, ])
st_is_valid(sewage)
p.48 <- pts.neigh.drain[pts.neigh.drain$ID==48, ]
gBuffer(p.48, width=10, byid=TRUE)
gBuffer(spTransform(p.48, CRS( "+init=epsg:32630" ), width=10, byid=TRUE)
gIntersects(p.48, sewage[sewage$id2==3, ], byid = TRUE)
plot(sewage[sewage$id2==3, ])
points(p.48)
points(pts.drain.int[pts.drain.int$drain == 3, ])
gBuffer(spTransform(p.48, CRS( "+init=epsg:32630" ), width=10, byid=TRUE))
buff <- gBuffer(spTransform(p.48, CRS( "+init=epsg:32630" ), width=10, byid=TRUE))
plot(buff, add= T)
buff
buff <- spTransform(buff, CRS("+proj=longlat +datum=WGS84"))
plot(buff, add= T)
plot(buff)
points(pts.drain.int[pts.drain.int$drain==2, ], col = "blue")
points(p.48)
plot(sewage[sewage$id2==3, ])
plot(sewage[sewage$id2==3, ])
points(p.48)
points(pts.drain.int[pts.drain.int$drain == 3, ])
plot(buff)
plot(sewage[sewage$id2==3, ])
plot(buff, add = T)
buff
buff <- spTransform(p.48, CRS("+proj=longlat +datum=WGS84"))
plot(buff, add = T)
buff
buff1 <- gBuffer(spTransform(p.48, CRS( "+init=epsg:32630" ), width=10, byid=TRUE))
buff <- spTransform(buff, CRS("+proj=longlat +datum=WGS84"))
plot(buff1, add = T)
points(p.48)
points(pts.drain.int[pts.drain.int$drain == 3, ])
test.points.projected
plot(sewage[sewage$id2==3, ])
points(p.48)
points(pts.drain.int[pts.drain.int$drain == 3, ])
points(pts.drain.int[pts.drain.int$drain == 4, ])
gIntersects(pts.drain.int[pts.drain.int$drain == 4, ], sewage[sewage$id2==3, ], byid = TRUE)
pts.drain.int
rownames(pts.drain.int) <- c(1:31)
View(pts.drain.int)
test.points <- SpatialPointsDataFrame(pts.drain.int[c("lon", "lat")],
data.frame(ID=seq(1:nrow(pts.drain.int))),
proj4string=CRS("+proj=longlat +datum=WGS84"))
test.points.sp <- spTransform(test.points, CRS( "+init=epsg:32630" ))
gIntersects(test.points.sp, sewage[sewage$id2==3, ], byid = TRUE)
gIntersects(test.points, sewage[sewage$id2==3, ], byid = TRUE)
gIntersection(test.points, sewage[sewage$id2==3, ], byid = TRUE)
test.points
gIntersection(test.points[test.points$ID ==3, ], sewage[sewage$id2==3, ], byid = TRUE)
gIntersects(test.points[test.points$ID ==3, ], sewage[sewage$id2==3, ], byid = TRUE)
over(test.points[test.points$ID ==3, ], sewage[sewage$id2==3, ], byid = TRUE)
gBuffer(test.points, width = 0.02)
gBuffer(test.points.sp, width = 0.02)
tst <- gBuffer(test.points.sp, width = 0.02)
overlay(tst, sewage)
