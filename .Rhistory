modeling2 <- full_join(hr, mpart, by = "locid")
modeling2 <- full_join(modeling2, mwater, by = "locid")
modeling2 <- full_join(modeling2, mswab, by = "locid")
View(modeling2)
hr <- df.envir %>%  filter(samtype == 8) %>% select(locid, hrec_con = ec_con, environ, neighbor, hr_sex, hr_agecat) %>% subset(!is.na(locid))
hr <- df.envir %>%  filter(samtype == 8) %>% select(locid, hrec_conc = ec_conc, environ, neighbor, hr_sex, hr_agecat) %>% subset(!is.na(locid))
hr <- df.envir %>%  filter(samtype == 8) %>% select(locid, hrec_conc = ec_conc, environ, neighbor, hr_sex, hr_agecat) %>% subset(!is.na(locid))
part <- df.envir %>%  filter(samtype == 2) %>% select(locid, partec_conc = ec_conc) %>% subset(!is.na(locid))
water <- df.envir %>%  filter(samtype == 4) %>% select(locid, waterec_conc = ec_conc) %>% subset(!is.na(locid))
swab <- df.envir %>%  filter(samtype == 9) %>%
mutate(ec_conc_adj = ec_conc/sw_area) %>%
select(locid, swabec_conc = ec_conc_adj) %>% subset(!is.na(locid))
mpart <- part %>% group_by(locid) %>% summarise_each(funs(mpartec_conc = mean(., na.rm=TRUE)))
mwater <- water %>% group_by(locid) %>% summarise_each(funs(mwaterec_conc = mean(., na.rm=TRUE)))
mswab <- swab %>% group_by(locid) %>% summarise_each(funs(mswabec_conc = mean(., na.rm=TRUE)))
modeling2 <- full_join(hr, mpart, by = "locid")
modeling2 <- full_join(modeling2, mwater, by = "locid")
modeling2 <- full_join(modeling2, mswab, by = "locid")
modeling2$hrec_conc
fit <- lm(hrec_lncon ~ neighbor + hr_sex + mpartec_lncon + mwaterec_lncon +
mswabec_lncon, data = modeling2)
fit <- lm(hrec_conc ~ neighbor + hr_sex + mpartec_conc + mwaterec_conc +
mswabec_conc, data = modeling2)
summary(fit)
version()
version
fit <- lm(hrec_conc ~ neighbor + hr_sex + mpartec_conc + mwaterec_conc +
mswabec_conc, data = modeling2)
summary(fit)
install.packages("benchmarkme")
library(benchmarkme)
install.packages("benchmarkmeData")
install.packages("benchmarkme")
install.packages("benchmarkme")
install.packages("benchmarkme")
library(benchmarkme)
res <- benchmark_io(runs = 1, size = 5)
fit <- lm(hrec_conc ~ neighbor + hr_sex + mpartec_conc + mwaterec_conc +
mswabec_conc, data = modeling2)
summary(fit)
fit <- lm(hrec_conc ~ neighbor + hr_sex + mswabec_conc, data = modeling2)
summary(fit)
fit <- lm(hrec_conc ~ neighbor + mswabec_conc, data = modeling2)
summary(fit)
fit <- lm(hrec_conc ~ neighbor + hr_sex + mpartec_conc + mwaterec_conc +
mswabec_conc, data = modeling2)
summary(fit)
View(modeling2)
fit <- lm(hrec_conc ~ neighbor + hr_sex + mpartec_conc + mwaterec_conc +
mswabec_conc, data = modeling2)
summary(fit)
fit <- lm(hrec_conc ~ neighbor + hr_sex + mswabec_conc, data = modeling2)
summary(fit)
fit <- lm(hrec_conc ~ neighbor + mswabec_conc, data = modeling2)
summary(fit)
View(modeling2)
fit <- glm(hrec_conc ~ neighbor + hr_sex + mpartec_conc + mwaterec_conc +
mswabec_conc, data = modeling2)
summary(fit)
View(modeling2)
install.packages("rgdal")
setwd("H:\Work\accra_ghana_neighborhoods\accra_shapefiles_individual")
library(rgdal)
setwd("H:\Work\accra_ghana_neighborhoods\accra_shapefiles_individual")
neighb <- readOGR(".","abbossey_okai")
library("rgdal", lib.loc="~/R/R-3.4.0/library")
detach("package:rgdal", unload=TRUE)
library("rgdal", lib.loc="~/R/R-3.4.0/library")
install.packages("sp")
install.packages("sp")
library(rgdal)
setwd("H:\Work\accra_ghana_neighborhoods\accra_shapefiles_individual")
neighb <- readOGR(".","abbossey_okai")
neighb <- readOGR(dsn = getwd(), laye r= "abbossey_okai")
neighb <- readOGR(dsn = getwd(), layer= "abbossey_okai")
library(raster)
install.packages("raster")
library(raster)
setwd("H:\Work\accra_ghana_neighborhoods\accra_shapefiles_individual")
neighb <- readOGR(dsn = getwd(), layer= "abbossey_okai")
paste0(getwd(), "abbossey_okai.shp")
setwd("H:\Work\accra_ghana_neighborhoods\accra_shapefiles_individual\")
neighb <- readOGR(dsn = getwd(), layer= "abbossey_okai")
neighb <- shapefile(paste0(getwd(), "abbossey_okai.shp"))
setwd("H:\Work\accra_ghana_neighborhoods\accra_shapefiles_individual\")
neighb <- readOGR(dsn = getwd(), layer= "abbossey_okai")
neighb <- shapefile(paste0(getwd(), "abbossey_okai.shp"))
setwd("H:\Work\accra_ghana_neighborhoods\accra_shapefiles_individual")
setwd("H:\Work\accra_ghana_neighborhoods\accra_shapefiles_individual")
neighb <- shapefile("H:\Work\accra_ghana_neighborhoods\accra_shapefiles_individual\abbossey_okai.shp")
setwd("H:\Work\accra_ghana_neighborhoods\accra_shapefiles_individual")
detach("package:raster", unload=TRUE)
setwd("H:\Work\accra_ghana_neighborhoods\accra_shapefiles_individual")
glimpse_colors <- function(colors_string){
n <- length(colors_string)
hist(1:n, breaks = 0:n, col = colors_string)
}
library(RColorBrewer)
pal <- brewer.pal(n = 9, name = 'BrBG')
glimpse_colors(pal)
pal <- brewer.pal(n = 19, name = 'BrBG')
glimpse_colors(pal)
pal
pal <- brewer.pal(n = 19, name = 'PiYG')
pal <- brewer.pal(n = 19, name = ' PRGn')
pal <- brewer.pal(n = 19, name = ' BrBG')
pal <- brewer.pal(n = 19, name = 'PRGn')
pal <- brewer.pal(n = 19, name = 'PiYG')
glimpse_colors(pal)
pal <- brewer.pal(n = 19, name = 'BrBG')
glimpse_colors(pal)
pal <- brewer.pal(n = 11, name = 'BrBG')
glimpse_colors(pal)
n <- length(colors_string)
hist(1:n, breaks = 0:n, col = colors_string)
glimpse_colors <- function(colors_string){
n <- length(colors_string)
hist(1:n, breaks = 0:n, col = colors_string)
}
library(RColorBrewer)
pal <- brewer.pal(n = 11, name = 'PuOr')
glimpse_colors(pal)
packages <- c("dplyr", "rgdal", "raster", "rgeos", "geosphere")
lapply(packages, library, character.only = TRUE)
setwd("H:/GitHub/accra_drains/")
sewage <- shapefile(paste0(getwd(), "/shapefiles/waterways/", "accra_waterw_con_ed_level_4.shp"))
sewage <- spTransform(sewage, CRS("+proj=longlat +datum=WGS84"))
sewage <- sewage[order(sewage@data$id2), ]
sewage.prj <- spTransform(sewage, CRS("+init=epsg:32630"))
neighbcoord <- read.csv(paste0(getwd(), "/data/", "points_coordinates_output.csv"), sep = ",")
source(paste0(getwd(), "/", "02_preset_analysis_options.R"))
source(paste0(getwd(), "/", "03_function.R"))
source(paste0(getwd(), "/", "01_helper_length_calc.R"))
source(paste0(getwd(), "/", "02_preset_analysis_options.R"))
source(paste0(getwd(), "/", "03_function.R"))
point2end(data.frame("lon" = c(-0.1579323, -0.2179325, -0.2579425), "lat" = c(5.560829, 5.660829, 5.580829)))
plot(sewage, col = "blue", axes=TRUE)
points(pts.neighb.sp, col="red", pch=20, cex=1)
points(pts.neigh.drain, col="green", pch=10, cex=1) #closest point to drain
points(pts.drain.start.sp, col="orange", pch=1, cex=1)
points(pts.drain.end.sp, col="brown", pch=5, cex=1)
plot(sewage, col = "blue", axes=TRUE)
plot(sewage[sewage$level==1, ], col = "blue", axes=TRUE)
plot(sewage[sewage$level==2, ], col = "green", axes=TRUE, add=TRUE)
plot(sewage[sewage$level==3, ], col = "brown", axes=TRUE, add=TRUE)
plot(sewage, col = "lightblue", axes=TRUE)
points(pts.neighb.sp[pts.neigh.drain.sp$ID==71, ], col="red", pch=20, cex=1)
point2end(neighbcoord)
plot(sewage, col = "lightblue", axes=TRUE)
points(pts.neighb.sp[pts.neigh.drain.sp$ID==71, ], col="red", pch=20, cex=1)
points(pts.neigh.drain[pts.neigh.drain$ID==71, ], col="green", pch=10, cex=1) #closest point to drain
plot(sewage[sewage$id2==1, ], col = "black", axes=TRUE, add=TRUE)
plot(sewage[sewage$id2==2, ], col = "blue", axes=TRUE, add=TRUE)
plot(sewage[sewage$id2==3, ], col = "black", axes=TRUE, add=TRUE)
lon <- as.numeric(format(runif(50, -.26, -0.15), digits = 7))
lat <- as.numeric(format(runif(50, 5.53, 5.67), digits = 7))
test.longlat <- data.frame(lon, lat)
test.df <- point2end(test.longlat)
plot(sewage, col = "lightblue", axes=TRUE)
points(pts.neighb.sp, col="red", pch=20, cex=1)
points(pts.neigh.drain, col="green", pch=10, cex=1) #closest point to drain
points(pts.neighb.sp[pts.neighb.sp$ID==1, ], col="blue", pch=20, cex=1)
points(pts.neigh.drain[pts.neigh.drain$ID==1, ], col="yellow", pch=10, cex=1) #closest point to drain
plot(sewage, col = "lightblue", axes=TRUE)
points(pts.neighb.sp, col="red", pch=20, cex=1)
points(pts.neigh.drain, col="green", pch=10, cex=1) #closest point to drain
df <- point2end(neighbcoord)
View(df)
plot(sewage, col = "lightblue", axes=TRUE)
points(pts.neighb.sp, col="red", pch=20, cex=1)
points(pts.neigh.drain, col="green", pch=10, cex=1) #closest point to drain
points(pts.neighb.sp[pts.neighb.sp$ID==1, ], col="blue", pch=20, cex=1)
points(pts.neigh.drain[pts.neigh.drain$ID==1, ], col="yellow", pch=10, cex=1) #closest point to drain
install.packages("deSolve")
install.packages("deSolve")
library(deSolve)
SIRBD <- function(pars){
## Show parameters
print(pars)
## Additional parameters
times <- seq(from = 0, to = 5000, by = 1)              # we want to run the model for 3000 time steps
yinit <- c(Susc = 0.9, Infected = 0.1, Recovered = 0) # this parameter sets the initial conditions
## below is the code for the actual model including the equations that you should recognize
SIR_model <- function(times, yinit, pars){
with(as.list(c(yinit,pars)), {
dSusc      <- birth - beta*Infected*Susc                     - death*Susc
dInfected  <-         beta*Infected*Susc - recovery*Infected - death*Infected
dRecovered <-                              recovery*Infected - death*Recovered
return(list(c(dSusc, dInfected, dRecovered)))})
}
## run the ode solver for the function specified (function defined above is used)
## return the value of each compartment (Susc, Infected, Recovered) for each time step.
results <- ode(func = SIR_model, times = times, y = yinit, parms = pars)
results <- as.data.frame(results)
## Return result
return(results)
}
test.pars <- c(beta = 1/30, recovery = 1/30, death = 0.001, birth = 0.001)
results   <- SIRBD(test.pars)
View(results)
simul.infect <- function(N.pop,beta,recovery,death,birth,days){
R0 <- beta/(recovery+death)
S_star <- 1/R0
I_star <- death/beta*(R0-1)
R_star <- 1-1/R0-death/beta*(R0-1)
#prob new infectious cases;
p1 <- beta * S_star * I_star;
#prob recovery (fixed duration of infectious 30 days for right now);
#p2 ???
#prob infectious cases death;
p3 <- death * I_star;
dur_infect<-ceiling(1/recovery)
res <- matrix(NA,nrow=days+30,ncol=dur_infect)
res[1,1] <- rbinom(1,N.pop,p1)
for (i in 2:(days+30)){
res[i,1] <- rbinom(1,N.pop,p1)
for (j in 2:dur_infect){
if (!is.na(res[i-1,j-1])){
res[i,j] <- max(res[i-1,j-1] - rbinom(1,res[i-1,j-1],p3),0)
}
}
}
return(res);
}
N.shed<-10^7
shed <- function(N.shed,r,p,days){
mat.shed <- matrix(NA,nrow=days,ncol=30)
vec.p.shed <- dnbinom(1:30,r,p)/sum(dnbinom(1:30,r,p))
for (i in 1:days){
mat.shed[i,] <- rbinom(30,N.shed,vec.p.shed)
}
return(mat.shed)
}
patho.count <- function(N.pop,beta,recovery,death,birth,days,N.shed,r,p){
infect.res <- simul.infect(N.pop,beta,recovery,death,birth,days)[-(1:30),]
mat.shed <- shed(N.shed,r,p,days)
patho.cnt <- rowSums(infect.res * mat.shed)
return(patho.cnt)
}
test<-patho.count(N.pop=10000,beta=0.04,recovery=1/30,death=0.001,birth=0.001,days=1000,N.shed=10^7,r=5,p=1/3)
n.days=1000
infect.res <- simul.infect(10000,0.04,1/30,0.001,0.001,n.days)[-(1:30),]
mat.shed <- shed(N.shed,r=5,p=1/3,days=n.days)
patho.cnt <- rowSums(infect.res * mat.shed)
patho.cnt
results
View(results)
matplot(results[, 1], results[, 2:4], type="l", lty=1)
legend("topright", col=1:3, legend=c("S", "I", "R"), lwd=1)
test<-patho.count(N.pop=10000,beta=0.04,recovery=1/30,death=0.001,birth=0.001,days=1000,N.shed=10^7,r=5,p=1/3)
View(test)
test
n.days=1000
infect.res <- simul.infect(10000,0.04,1/30,0.001,0.001,n.days)[-(1:30),]
View(infect.res)
mat.shed <- shed(N.shed,r=5,p=1/3,days=n.days)
View(mat.shed)
patho.cnt <- rowSums(infect.res * mat.shed)
patho.cnt
line <- (sewage[sewage$id2==3, ])
plot(sewage[sewage$id2==1, ], col = "black", axes=TRUE, add=TRUE)
plot(sewage[sewage$id2==2, ], col = "blue", axes=TRUE, add=TRUE)
plot(sewage[sewage$id2==3, ], col = "black", axes=TRUE, add=TRUE)
setwd("H:/GitHub/accra_drains/")
source(paste0(getwd(), "/", "01_helper_length_calc.R"))
sewage <- shapefile(paste0(getwd(), "/shapefiles/waterways/", "accra_waterw_con_ed_level_4.shp"))
sewage <- spTransform(sewage, CRS("+proj=longlat +datum=WGS84"))
sewage <- sewage[order(sewage@data$id2), ]
sewage.prj <- spTransform(sewage, CRS("+init=epsg:32630"))
neighbcoord <- read.csv(paste0(getwd(), "/data/", "points_coordinates_output.csv"), sep = ",")
View(neighbcoord)
neighb <- read.csv(paste0(getwd(), "/data/", "neighborhoods_all_clean"), sep = ",")
neighb <- read.csv(paste0(getwd(), "/data/", "neighborhoods_all_clean.csv"), sep = ",")
colnames(neighb)
colnames(neighbcoord)
neighbcoord1 <- select(neighb, Neighborhood, lon, lat)
neighb <- read.csv(paste0(getwd(), "/data/", "neighborhoods_all_clean.csv"), sep = ",")
neighbcoord1 <- select(neighb, Neighborhood, lon, lat)
neighbcoord1 <- dplyr::select(neighb, Neighborhood, lon, lat)
View(neighbcoord)
View(neighbcoord1)
neighbcoord$lon == neighbcoord1$lon
order(neighbcoord, Neighborhood)
order(neighbcoord, neighbcoord$Neighborhood)
neighbcoord <- neighbcoord[order(neighbcoord$Neighborhood), ]
neighbcoord1 <- neighbcoord1[order(neighbcoord1$Neighborhood), ]
neighbcoord$lon == neighbcoord1$lon
neighbcoord$lat == neighbcoord1$lat
View(neighbcoord1)
View(neighb)
point2end(neighbcoord)
source(paste0(getwd(), "/", "02_preset_analysis_options.R"))
source(paste0(getwd(), "/", "03_function.R"))
point2end(neighbcoord)
neighbcoord <- read.csv(paste0(getwd(), "/data/", "points_coordinates_output.csv"), sep = ",")
df <- point2end(neighbcoord)
plot(sewage, col = "lightblue", axes=TRUE)
points(pts.neighb.sp[pts.neighb.sp$ID==1, ], col="blue", pch=20, cex=1)
points(pts.neigh.drain[pts.neigh.drain$ID==1, ], col="yellow", pch=10, cex=1) #closest point to drain
View(neighb)
View(df)
df %>% filter(iteration == 1)
plot(sewage[sewage$id2 == 14, ], col = "lightblue", axes=TRUE)
points(pts.neighb.sp[pts.neighb.sp$ID==1, ], col="blue", pch=20, cex=1)
points(pts.neigh.drain[pts.neigh.drain$ID==1, ], col="yellow", pch=10, cex=1) #closest point to drain
circles.prj <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[1],], width=d, byid=TRUE)
circles.prj
plot(circles.prj)
plot(sewage[sewage$id2 == 14, ], col = "lightblue", axes=TRUE)
points(pts.neighb.sp[pts.neighb.sp$ID==1, ], col="blue", pch=20, cex=1)
points(pts.neigh.drain[pts.neigh.drain$ID==1, ], col="yellow", pch=10, cex=1) #closest point to drain
plot(circles.prj, add=T)
d <- gDistance(pts.drain.end.prj[pts.neigh.drain.sp$ID2[1], ], pts.neigh.drain.sp[1, ])
circles.prj <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[1],], width=d, byid=TRUE)
SpatialPointsDataFrame(circples.prk, proj4string=CRS("+proj=longlat +datum=WGS84"))
SpatialPointsDataFrame(circples.prj, proj4string=CRS("+proj=longlat +datum=WGS84"))
SpatialPointsDataFrame(circles.prj, proj4string=CRS("+proj=longlat +datum=WGS84"))
circles.prj
SpatialPointsDataFrame(circles.prj,
data.frame(ID=seq(1:nrow(circles.prj))),
proj4string=CRS("+proj=longlat +datum=WGS84"))
SpatialPointsDataFrame(circles.prj,
data.frame(ID=seq(1:nrow(circles.prj))),
proj4string=CRS("+proj=longlat +datum=WGS84"))
SpatialPoints(circles.prj, CRS("+init=epsg:32630"))
SpatialPoints(circles.prj, CRS("+proj=longlat"))
my.points = as.data.frame(spTransform(circles.prj, CRS('+proj=longlat')))
my.points
spTransform(circles.prj, CRS('+proj=longlat'))
circles.prj <- spTransform(circles.prj, CRS('+proj=longlat'))
plot(circles.prj, add=T)
library(maptools)
CreateSegment <- function(coords, from, to) {
distance <- 0
coordsOut <- c()
biggerThanFrom <- F
for (i in 1:(nrow(coords) - 1)) {
d <- sqrt((coords[i, 1] - coords[i + 1, 1])^2 + (coords[i, 2] - coords[i +
1, 2])^2)
distance <- distance + d
if (!biggerThanFrom && (distance > from)) {
w <- 1 - (distance - from)/d
x <- coords[i, 1] + w * (coords[i + 1, 1] - coords[i, 1])
y <- coords[i, 2] + w * (coords[i + 1, 2] - coords[i, 2])
coordsOut <- rbind(coordsOut, c(x, y))
biggerThanFrom <- T
}
if (biggerThanFrom) {
if (distance > to) {
w <- 1 - (distance - to)/d
x <- coords[i, 1] + w * (coords[i + 1, 1] - coords[i, 1])
y <- coords[i, 2] + w * (coords[i + 1, 2] - coords[i, 2])
coordsOut <- rbind(coordsOut, c(x, y))
break
}
coordsOut <- rbind(coordsOut, c(coords[i + 1, 1], coords[i + 1,
2]))
}
}
return(coordsOut)
}
CreateSegment(sewage[sewage$id2 == 14, ])
circles.prj
CreateSegment(sewage[sewage$id2 == 14, ], -0.234773, 5.539003)
sewage[sewage$id2 == 14, ]
gIntersection(circles.prj, sewage[sewage$id2 == 14, ])
sewage[sewage$id2 == 14, ]
circles.prj
gIntersection(circles.prj, sewage.prj[sewage.prj$id2 == 14, ])
gIntersection(circles.prj, sewage.prj[sewage.prj$id2 == 14, ], byid=c(TRUE, TRUE))
sewage.prj
circles.prj <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[1],], width=d, byid=TRUE)
gIntersection(circles.prj, sewage.prj[sewage.prj$id2 == 14, ], byid=c(TRUE, TRUE))
plot(line, add= T)
line
line <- gIntersection(circles.prj, sewage.prj[sewage.prj$id2 == 14, ], byid=c(TRUE, TRUE))
plot(line, add= T)
line
line <- spTransform(line, CRS('+proj=longlat'))
plot(line, add= T)
circles.prj <- spTransform(circles.prj, CRS('+proj=longlat'))
line <- gIntersection(circles.prj, sewage[sewage$id2 == 14, ], byid=c(TRUE, TRUE))
plot(circles.prj, add=T)
plot(sewage[sewage$id2 == 14, ], col = "lightblue", axes=TRUE)
plot(sewage, col = "lightblue", axes=TRUE)
points(pts.neighb.sp[pts.neighb.sp$ID==1, ], col="blue", pch=20, cex=1)
points(pts.neigh.drain[pts.neigh.drain$ID==1, ], col="yellow", pch=10, cex=1) #closest point to drain
plot(line, add= T)
plot(sewage[sewage$id2==1, ], col = "black", axes=TRUE, add=TRUE)
plot(sewage[sewage$id2==2, ], col = "blue", axes=TRUE, add=TRUE)
df %>% filter(iteration == 2)
plot(sewage, col = "lightblue", axes=TRUE)
d <- gDistance(pts.drain.end.prj[pts.neigh.drain.sp$ID2[2], ], pts.neigh.drain.sp[2, ])
circles.prj <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[2],], width=d, byid=TRUE)
plot(circles.prj, add=T)
line <- gIntersection(circles.prj, sewage.prj[sewage.prj$id2 == 22, ], byid=c(TRUE, TRUE))
line <- spTransform(line, CRS('+proj=longlat'))
plot(line, add= T)
circles.prj <- spTransform(circles.prj, CRS('+proj=longlat'))
plot(circles.prj, add=T)
sewage.part.length.df <- data.frame("length" = c(NA), "drain" = c(NA), "iteration" = c(NA))
for (i in 1:length(pts.neigh.drain)){
d <- gDistance(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i], ], pts.neigh.drain.sp[i, ])
circles.prj[i, ] <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i],], width=d, byid=TRUE)
sewage.part.length.df[i, ] <- c(line.length(sewage.prj[pts.neigh.drain.sp$ID2[i], ], circles.prj),
pts.neigh.drain.sp$ID2[i], i)
}
sewage.part.length.df <- data.frame("length" = c(NA), "drain" = c(NA), "iteration" = c(NA))
for (i in 1:length(pts.neigh.drain)){
d <- gDistance(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i], ], pts.neigh.drain.sp[i, ])
circles.prj <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i],], width=d, byid=TRUE)
sewage.part.length.df[i, ] <- c(line.length(sewage.prj[pts.neigh.drain.sp$ID2[i], ], circles.prj),
pts.neigh.drain.sp$ID2[i], i)
}
circles.prj <- SpatialPolygonsDataFrame(NA)
circles.prj <- SpatialPolygonsDataFrame("data"=c(), "polygons"=c(), "plotOrder"=c(), "bbox"=c(), "proj4string"=c())
circles.prj <- SpatialPolygonsDataFrame(list())
circles.prj <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i],], width=d, byid=TRUE)
sewage.part.length.df <- data.frame("length" = c(NA), "drain" = c(NA), "iteration" = c(NA))
for (i in 1:length(pts.neigh.drain)){
d <- gDistance(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i], ], pts.neigh.drain.sp[i, ])
circles.prj[i, ] <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i],], width=d, byid=TRUE)
sewage.part.length.df[i, ] <- c(line.length(sewage.prj[pts.neigh.drain.sp$ID2[i], ], circles.prj),
pts.neigh.drain.sp$ID2[i], i)
}
circles.prj[i ] <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i],], width=d, byid=TRUE)
for (i in 1:length(pts.neigh.drain)){
d <- gDistance(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i], ], pts.neigh.drain.sp[i, ])
circles.prj[i ] <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i],], width=d, byid=TRUE)
sewage.part.length.df[i, ] <- c(line.length(sewage.prj[pts.neigh.drain.sp$ID2[i], ], circles.prj),
pts.neigh.drain.sp$ID2[i], i)
}
circles.prj <- list()
for (i in 1:length(pts.neigh.drain)){
d <- gDistance(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i], ], pts.neigh.drain.sp[i, ])
circles.prj[i ] <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i],], width=d, byid=TRUE)
sewage.part.length.df[i, ] <- c(line.length(sewage.prj[pts.neigh.drain.sp$ID2[i], ], circles.prj),
pts.neigh.drain.sp$ID2[i], i)
}
circles.prj <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[1],], width=d, byid=TRUE)
circles.prj1 <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[1],], width=d, byid=TRUE)
circles.prj <- rbind(circles.prj, circles.prj1)
circles.prj1 <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[2],], width=d, byid=TRUE)
circles.prj <- rbind(circles.prj, circles.prj1)
circles.prj
plot(circles.prj, add=T)
circles.prj <- spTransform(circles.prj, CRS('+proj=longlat'))
plot(circles.prj, add=T)
pts.drain.end.prj[pts.neigh.drain.sp$ID2[1], ]
circles.prj
circles.prj[circles.prj$ID[1]], ]
circles.prj[circles.prj$ID[1], ]
pts.drain.end.prj[pts.neigh.drain.sp$ID2[1],]
ewage.prj[sewage.prj$id2 == circles.prj[circles.prj$ID[1], ]]
sewage.prj[sewage.prj$id2 == circles.prj[circles.prj$ID[1], ]]
circles.prj[circles.prj$ID[1]]
circles.prj
circles.prj$ID[1]
sewage.prj[sewage.prj$id2 == circles.prj$ID[1]], ]
sewage.prj[sewage.prj$id2 == circles.prj$ID[1]]
sewage.prj[sewage.prj$id2
sewage.prj[sewage.prj$id2]
sewage.prj[sewage.prj$id2== circles.prj$ID[1],]
line1 <- gIntersection(circles.prj, sewage.prj[sewage.prj$id2 == circles.prj$ID[1], ], byid=c(TRUE, TRUE))
circles.prj1 <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[1],], width=d, byid=TRUE)
circles.prj <- rbind(circles.prj, circles.prj1)
line1 <- gIntersection(circles.prj[1], sewage.prj[sewage.prj$id2 == circles.prj$ID[1], ], byid=c(TRUE, TRUE))
line1 <- gIntersection(circles.prj[1], sewage.prj[sewage$id2 == circles$ID[1], ], byid=c(TRUE, TRUE))
line1 <- gIntersection(circles.prj[1], sewage.prj[sewage$id2 == circles.prj$ID[1], ], byid=c(TRUE, TRUE))
circles.prj
line1 <- gIntersection(circles.prj[1], sewage[sewage$id2 == circles.prj$ID[1], ], byid=c(TRUE, TRUE))
line1 <- gIntersection(circles.prj[1], sewage[sewage$id2 == circles.prj$ID[1], ], byid=c(TRUE, TRUE))
circles.prj[1]
sewage
circles.prj <- spTransform(circles.prj, CRS('+proj=longlat'))
line1 <- gIntersection(circles.prj[1], sewage[sewage$id2 == circles.prj$ID[1], ], byid=c(TRUE, TRUE))
circles.prj
sewage
sewage.prj
circles.prj
sewage
plot(circles.prj, add=T, col=4)
circles.prj <- spTransform(circles.prj, CRS('+proj=longlat +datum=WGS84"))
line1 <- gIntersection(circles.prj[1], sewage[sewage$id2 == circles.prj$ID[1], ], byid=c(TRUE, TRUE))
# circles.prj <- spTransform(circles.prj, CRS('+proj=longlat'))
plot(circles.prj, add=T, col=4)
line <- gIntersection(circles.prj, sewage.prj[sewage.prj$id2 == 14, ], byid=c(TRUE, TRUE))
line <- spTransform(line, CRS('+proj=longlat'))
plot(line, add= T)
###
d <- gDistance(pts.drain.end.prj[pts.neigh.drain.sp$ID2[2], ], pts.neigh.drain.sp[2, ])
circles.prj <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[2],], width=d, byid=TRUE)
# circles.prj <- spTransform(circles.prj, CRS('+proj=longlat'))
plot(circles.prj, add=T)
line <- gIntersection(circles.prj, sewage.prj[sewage.prj$id2 == 22, ], byid=c(TRUE, TRUE))
line <- spTransform(line, CRS('+proj=longlat'))
plot(line, add= T)
# #***********************************************************************************************
# Plot example
plot(sewage, col = "lightblue", axes=TRUE)
points(pts.neighb.sp, col="red", pch=20, cex=1)
points(pts.neigh.drain, col="green", pch=10, cex=1) #closest point to drain
circles.prj <- spTransform(circles.prj, CRS('+proj=longlat +datum=WGS84'))
line1 <- gIntersection(circles.prj[1], sewage[sewage$id2 == circles.prj$ID[1], ], byid=c(TRUE, TRUE))
plot(circles.prj, add=T, col=4)
circles.prj1 <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[2],], width=d, byid=TRUE)
circles.prj <- rbind(circles.prj, circles.prj1)
circles.prj1 <- spTransform(circles.prj1, CRS('+proj=longlat +datum=WGS84'))
circles.prj <- rbind(circles.prj, circles.prj1)
line1 <- gIntersection(circles.prj[1], sewage[sewage$id2 == circles.prj$ID[1], ], byid=c(TRUE, TRUE))
line1
plot(line1, add= T)
