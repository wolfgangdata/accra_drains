}
return(sewage.part)
setwd("H:/GitHub/accra_drains/")
source(paste0(getwd(), "/", "01_helper_length_calc.R"))
# load data ----
# waterways
sewage <- shapefile(paste0(getwd(), "/shapefiles/waterways/", "accra_waterw_con_ed_level_4.shp"))
sewage <- spTransform(sewage, CRS("+proj=longlat +datum=WGS84"))
sewage <- sewage[order(sewage@data$id2), ]
sewage.prj <- spTransform(sewage, CRS("+init=epsg:32630"))
# neighborhood weighted mid point
neighb <- read.csv(paste0(getwd(), "/data/", "neighborhoods_all_clean.csv"), sep = ",")
neighbcoord <- read.csv(paste0(getwd(), "/data/", "points_coordinates_output.csv"), sep = ",")
# # neighborhood shape file
# ama <- shapefile(paste0(getwd(), "/shapefiles/neighborhood/", "AMA_projected.shp"))
# ama <- spTransform(ama, CRS("+proj=longlat +datum=WGS84"))
# #***********************************************************************************************
source(paste0(getwd(), "/", "02_preset_analysis_options.R"))
source(paste0(getwd(), "/", "03_function.R"))
df <- point2end(neighbcoord)
plot(sewage, col = "lightblue", axes=TRUE)
for (i in 1:length(pts.neigh.drain)){
point <- i
df[df$iteration == point, ]
plot.lines <- df[df$iteration == point, ]$drain
max <- length(plot.lines)
plot.lines.reg <- plot.lines[-max]
# png(paste0(getwd(), "/plots1/", paste0("map_", i, ".png") ))
plot(sewage, col = "lightblue", axes=TRUE)
points(pts.neighb.sp[pts.neighb.sp$ID==point, ], col="blue", pch=20, cex=1)
points(pts.neigh.drain[pts.neigh.drain$ID==point, ], col="orange", pch=10, cex=1) #closest point to drain
plot(sewage.part[sewage.part$iteration == point, ] , col = "blue", axes=TRUE, add=TRUE)
for (i in plot.lines.reg){
plot(sewage[sewage$id2 == i, ], col = "blue", axes=TRUE, add=TRUE)
}
# dev.off()
}
setwd("H:/GitHub/accra_drains/")
source(paste0(getwd(), "/", "01_helper_length_calc.R"))
# load data ----
# waterways
sewage <- shapefile(paste0(getwd(), "/shapefiles/waterways/", "accra_waterw_con_ed_level_4.shp"))
sewage <- spTransform(sewage, CRS("+proj=longlat +datum=WGS84"))
sewage <- sewage[order(sewage@data$id2), ]
sewage.prj <- spTransform(sewage, CRS("+init=epsg:32630"))
# neighborhood weighted mid point
neighb <- read.csv(paste0(getwd(), "/data/", "neighborhoods_all_clean.csv"), sep = ",")
neighbcoord <- read.csv(paste0(getwd(), "/data/", "points_coordinates_output.csv"), sep = ",")
# # neighborhood shape file
# ama <- shapefile(paste0(getwd(), "/shapefiles/neighborhood/", "AMA_projected.shp"))
# ama <- spTransform(ama, CRS("+proj=longlat +datum=WGS84"))
# #***********************************************************************************************
source(paste0(getwd(), "/", "02_preset_analysis_options.R"))
source(paste0(getwd(), "/", "03_function.R"))
df <- point2end(neighbcoord)
plot(sewage, col = "lightblue", axes=TRUE)
for (i in 1:length(pts.neigh.drain)){
point <- i
df[df$iteration == point, ]
plot.lines <- df[df$iteration == point, ]$drain
max <- length(plot.lines)
plot.lines.reg <- plot.lines[-max]
# png(paste0(getwd(), "/plots1/", paste0("map_", i, ".png") ))
plot(sewage, col = "lightblue", axes=TRUE)
points(pts.neighb.sp[pts.neighb.sp$ID==point, ], col="blue", pch=20, cex=1)
points(pts.neigh.drain[pts.neigh.drain$ID==point, ], col="orange", pch=10, cex=1) #closest point to drain
plot(sewage.part[sewage.part$iteration == point, ] , col = "blue", axes=TRUE, add=TRUE)
for (i in plot.lines.reg){
plot(sewage[sewage$id2 == i, ], col = "blue", axes=TRUE, add=TRUE)
}
# dev.off()
}
source(03_function.R)
source("03_function.R")
source(paste0(getwd(), "/", "02_preset_analysis_options.R"))
source(paste0(getwd(), "/", "03_function.R"))
sewage.part
source(paste0(getwd(), "/", "03_function.R"))
df <- point2end(neighbcoord)
source(paste0(getwd(), "/", "03_function.R"))
df <- point2end(neighbcoord)
source(paste0(getwd(), "/", "03_function.R"))
df <- point2end(neighbcoord)
plot(sewage, col = "lightblue", axes=TRUE)
for (i in 1:length(pts.neigh.drain)){
point <- i
df[df$iteration == point, ]
plot.lines <- df[df$iteration == point, ]$drain
max <- length(plot.lines)
plot.lines.reg <- plot.lines[-max]
png(paste0(getwd(), "/plots1/", paste0("map_", i, ".png") ))
plot(sewage, col = "lightblue", axes=TRUE)
points(pts.neighb.sp[pts.neighb.sp$ID==point, ], col="blue", pch=20, cex=1)
points(pts.neigh.drain[pts.neigh.drain$ID==point, ], col="orange", pch=10, cex=1) #closest point to drain
plot(sewage.part[sewage.part$iteration == point, ] , col = "blue", axes=TRUE, add=TRUE)
for (i in plot.lines.reg){
plot(sewage[sewage$id2 == i, ], col = "blue", axes=TRUE, add=TRUE)
}
dev.off()
}
plot(circles.prj1[circles.prj1$iteration == 7, ], axes=TRUE, add=TRUE)
circles.prj1 <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[1],], width=d, byid=TRUE)
circles.prj1 <- spTransform(circles.prj1, CRS('+proj=longlat +datum=WGS84'))
circles.prj1$iteration <- 99
sewage.part <<- gIntersection(circles.prj1[1,], sewage[sewage$id2 == circles.prj1$ID[1], ], byid=c(TRUE, TRUE))
sewage.part$drainID <<- 99
sewage.part$iteration <<- 99
for (i in 1:length(pts.neigh.drain)){
d <- gDistance(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i], ], pts.neigh.drain.sp[i, ])
circles.prj <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i],], width=d, byid=TRUE)
sewage.part.length.df[i, ] <- c(line.length(sewage.prj[pts.neigh.drain.sp$ID2[i], ], circles.prj),
pts.neigh.drain.sp$ID2[i], i)
circles.prj <- spTransform(circles.prj, CRS('+proj=longlat +datum=WGS84'))
circles.prj$iteration <- i
circles.prj1 <- rbind(circles.prj1, circles.prj)
d <- gDistance(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i], ], pts.neigh.drain.sp[i, ])
circles.prj <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i],], width=d, byid=TRUE)
circles.prj <- spTransform(circles.prj, CRS('+proj=longlat +datum=WGS84'))
line2 <- gIntersection(circles.prj, sewage[sewage$id2 == circles.prj$ID, ], byid=c(TRUE, TRUE))
line2$drainID <- pts.neigh.drain.sp$ID2[i]
line2$iteration <- i
sewage.part <<- rbind(sewage.part, line2)
}
sewage.part.length.df <- data.frame("length" = c(NA), "drain" = c(NA), "iteration" = c(NA))
#setup circle/ line to create spatial polygons/ lines data frame & then later delete this first entry
circles.prj1 <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[1],], width=d, byid=TRUE)
circles.prj1 <- spTransform(circles.prj1, CRS('+proj=longlat +datum=WGS84'))
circles.prj1$iteration <- 99
sewage.part <<- gIntersection(circles.prj1[1,], sewage[sewage$id2 == circles.prj1$ID[1], ], byid=c(TRUE, TRUE))
sewage.part$drainID <<- 99
sewage.part$iteration <<- 99
for (i in 1:length(pts.neigh.drain)){
d <- gDistance(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i], ], pts.neigh.drain.sp[i, ])
circles.prj <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i],], width=d, byid=TRUE)
sewage.part.length.df[i, ] <- c(line.length(sewage.prj[pts.neigh.drain.sp$ID2[i], ], circles.prj),
pts.neigh.drain.sp$ID2[i], i)
circles.prj <- spTransform(circles.prj, CRS('+proj=longlat +datum=WGS84'))
circles.prj$iteration <- i
circles.prj1 <- rbind(circles.prj1, circles.prj)
d <- gDistance(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i], ], pts.neigh.drain.sp[i, ])
circles.prj <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i],], width=d, byid=TRUE)
circles.prj <- spTransform(circles.prj, CRS('+proj=longlat +datum=WGS84'))
line2 <- gIntersection(circles.prj, sewage[sewage$id2 == circles.prj$ID, ], byid=c(TRUE, TRUE))
line2$drainID <- pts.neigh.drain.sp$ID2[i]
line2$iteration <- i
sewage.part <<- rbind(sewage.part, line2)
}
circles.prj
line2
sewage.part <<- rbind(sewage.part, line2)
sewage.part <- rbind(sewage.part, line2)
sewage.part <- gIntersection(circles.prj1[1,], sewage[sewage$id2 == circles.prj1$ID[1], ], byid=c(TRUE, TRUE))
sewage.part$drainID <- 99
sewage.part$iteration <- 99
for (i in 1:length(pts.neigh.drain)){
d <- gDistance(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i], ], pts.neigh.drain.sp[i, ])
circles.prj <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i],], width=d, byid=TRUE)
sewage.part.length.df[i, ] <- c(line.length(sewage.prj[pts.neigh.drain.sp$ID2[i], ], circles.prj),
pts.neigh.drain.sp$ID2[i], i)
circles.prj <- spTransform(circles.prj, CRS('+proj=longlat +datum=WGS84'))
circles.prj$iteration <- i
circles.prj1 <- rbind(circles.prj1, circles.prj)
d <- gDistance(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i], ], pts.neigh.drain.sp[i, ])
circles.prj <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i],], width=d, byid=TRUE)
circles.prj <- spTransform(circles.prj, CRS('+proj=longlat +datum=WGS84'))
line2 <- gIntersection(circles.prj, sewage[sewage$id2 == circles.prj$ID, ], byid=c(TRUE, TRUE))
line2$drainID <- pts.neigh.drain.sp$ID2[i]
line2$iteration <- i
sewage.part <- rbind(sewage.part, line2)
}
plot(circles.prj1[circles.prj1$iteration == 7, ], axes=TRUE, add=TRUE)
plot(circles.prj1[circles.prj1$iteration == 8, ], axes=TRUE, add=TRUE)
plot(circles.prj1[circles.prj1$iteration == 5, ], axes=TRUE, add=TRUE)
# preset options:
# calculate start and end points of each line segment ----
# all coordinates of each point for each line
linepoints <- lapply(slot(sewage, "lines"),
function(x) lapply(slot(x, "Lines"), function(y) slot(y, "coords")))
# select endpoints of each line == intersections of drains sections
# for some reason for drain 15 and 25, the endpoints are at the beginning of the df, therefore
#   head() is used
pts.drain.end <- data.frame("lon" = c(NA), "lat" = c(NA))
for (i in 1:length(linepoints)) {
if (i == 15 | i == 25 | i == 8){
pts.drain.end[i, ] <- head(data.frame(linepoints[i]), 1)
} else {
pts.drain.end[i, ] <- tail(data.frame(linepoints[i]), 1)
}
}
pts.drain.end$drain <- c(1:31)
rownames(pts.drain.end) <- c(1:31)
# pts beginning of drain
pts.drain.start <- data.frame("lon" = c(-NA), "lat" = c(NA))
for (i in 1:length(linepoints)) {
if (i == 15 | i == 25 | i == 8){
pts.drain.start[i, ] <- tail(data.frame(linepoints[i]), 1)
} else {
pts.drain.start[i, ] <- head(data.frame(linepoints[i]), 1)
}
}
pts.drain.start$drain <- c(1:31)
rownames(pts.drain.start) <- c(1:31)
#***********************************************************************************************
# # calculate length of each drain part ----
# pts.drain.end #end point
# pts.drain.start #start point
# length of each drain
pts.drain.end.sp <- SpatialPointsDataFrame(pts.drain.end[c("lon", "lat")],
data.frame(ID=seq(1:nrow(pts.drain.end))),
proj4string=CRS("+proj=longlat +datum=WGS84"))
pts.drain.end.prj <- spTransform(pts.drain.end.sp, CRS("+init=epsg:32630"))
pts.drain.start.sp <- SpatialPointsDataFrame(pts.drain.start[c("lon", "lat")],
data.frame(ID=seq(1:nrow(pts.drain.start))),
proj4string=CRS("+proj=longlat +datum=WGS84"))
pts.drain.start.prj <- spTransform(pts.drain.start.sp, CRS("+init=epsg:32630"))
sewage.length.df <- data.frame("length" = c(NA), "drain" = c(NA))
for (i in 1:length(sewage.prj)){
d <- gDistance(pts.drain.end.prj[i, ], pts.drain.start.prj[i, ]) #d of beg and end point of drain
circles.prj <- gBuffer(pts.drain.end.prj[i,], width=d, byid=TRUE)
sewage.length.df[i, ] <- c(line.length(sewage.prj[i, ], circles.prj), i)
}
# add levels to drains
a <- c(1:12)
b <- c(13:27)
c <- c(28:31)
drain.levels <- data.frame("drain"=c(a,b,c),
"level"=c(rep(1,length(a)),rep(2,length(b)), rep(3,length(c))))
sewage.length.df <- left_join(sewage.length.df, drain.levels, by="drain")
rm(a,b,c)
# # alternative way of measuring length of all line segments
# sewage.length.df$test2 <- SpatialLinesLengths(sewage.prj)
# sewage.length.df$test3 <- sewage.length.df$test2 - sewage.length.df$length
#***********************************************************************************************
# function
point2end <- function(neighbcoord){
# connections of each drain to reach end point
p01 <- sewage.length.df %>% filter(drain %in% c( ))
p02 <- sewage.length.df %>% filter(drain %in% c(1))
p03 <- sewage.length.df %>% filter(drain %in% c(1:2))
p04 <- sewage.length.df %>% filter(drain %in% c(1:3))
p05 <- sewage.length.df %>% filter(drain %in% c(1:4))
p06 <- sewage.length.df %>% filter(drain %in% c(1:5))
p07 <- sewage.length.df %>% filter(drain %in% c(1:6))
p08 <- sewage.length.df %>% filter(drain %in% c(1:7))
p09 <- sewage.length.df %>% filter(drain %in% c(1:8))
p10 <- sewage.length.df %>% filter(drain %in% c(1:9))
p11 <- sewage.length.df %>% filter(drain %in% c(1:10))
p12 <- sewage.length.df %>% filter(drain %in% c(1:11))
p13 <- sewage.length.df %>% filter(drain %in% c(1))
p14 <- sewage.length.df %>% filter(drain %in% c(1:2))
p15 <- sewage.length.df %>% filter(drain %in% c(1:3))
p16 <- sewage.length.df %>% filter(drain %in% c(1:4))
p17 <- sewage.length.df %>% filter(drain %in% c(1:4, 16))
p18 <- sewage.length.df %>% filter(drain %in% c(1:4, 16:17))
p19 <- sewage.length.df %>% filter(drain %in% c(1:4, 16:18))
p20 <- sewage.length.df %>% filter(drain %in% c(1:5))
p21 <- sewage.length.df %>% filter(drain %in% c(1:5, 20))
p22 <- sewage.length.df %>% filter(drain %in% c(1:6))
p23 <- sewage.length.df %>% filter(drain %in% c(1:7))
p24 <- sewage.length.df %>% filter(drain %in% c(1:8))
p25 <- sewage.length.df %>% filter(drain %in% c(1:9))
p26 <- sewage.length.df %>% filter(drain %in% c(1:10))
p27 <- sewage.length.df %>% filter(drain %in% c(1:11))
p28 <- sewage.length.df %>% filter(drain %in% c(1:5, 20))
p29 <- sewage.length.df %>% filter(drain %in% c(1:4, 16))
p30 <- sewage.length.df %>% filter(drain %in% c(1:4, 16:17))
p31 <- sewage.length.df %>% filter(drain %in% c(1:4, 16:18))
#***********************************************************************************************
pts.neighb.sp <<- SpatialPointsDataFrame(neighbcoord[, c("lon", "lat")],
data.frame(ID=seq(1:nrow(neighbcoord))),
proj4string=CRS("+proj=longlat +datum=WGS84"))
# distance to sewage (shortest way to line), ID2: feature line intersects with = drain ID
dist2sewagedf <- data.frame("distance" = c(NA),"lon" = c(NA), "lat" = c(NA), "ID2" = c(NA))
# distance + coordinates of intersection + drain ID
for (i in 1:length(neighbcoord[ ,1])) {
dist2sewagedf[i, ] <- rbind(dist2Line(neighbcoord[i, c("lon", "lat")], sewage))
}
pts.neigh.drain <<- SpatialPointsDataFrame(dist2sewagedf[c("lon", "lat")],
data.frame(ID=seq(1:nrow(dist2sewagedf)), ID2 = dist2sewagedf$ID2),
proj4string=CRS("+proj=longlat +datum=WGS84"))
pts.neigh.drain.sp <<- spTransform(pts.neigh.drain, CRS( "+init=epsg:32630" ))
# calculate each small part of id'd section. from intersection to end point of section.
sewage.part.length.df <- data.frame("length" = c(NA), "drain" = c(NA), "iteration" = c(NA))
#setup circle/ line to create spatial polygons/ lines data frame & then later delete this first entry
circles.prj1 <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[1],], width=d, byid=TRUE)
circles.prj1 <- spTransform(circles.prj1, CRS('+proj=longlat +datum=WGS84'))
circles.prj1$iteration <- 99
sewage.part <- gIntersection(circles.prj1[1,], sewage[sewage$id2 == circles.prj1$ID[1], ], byid=c(TRUE, TRUE))
sewage.part$drainID <- 99
sewage.part$iteration <- 99
for (i in 1:length(pts.neigh.drain)){
d <- gDistance(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i], ], pts.neigh.drain.sp[i, ])
circles.prj <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i],], width=d, byid=TRUE)
sewage.part.length.df[i, ] <- c(line.length(sewage.prj[pts.neigh.drain.sp$ID2[i], ], circles.prj),
pts.neigh.drain.sp$ID2[i], i)
circles.prj <- spTransform(circles.prj, CRS('+proj=longlat +datum=WGS84'))
circles.prj$iteration <- i
circles.prj1 <- rbind(circles.prj1, circles.prj)
d <- gDistance(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i], ], pts.neigh.drain.sp[i, ])
circles.prj <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i],], width=d, byid=TRUE)
circles.prj <- spTransform(circles.prj, CRS('+proj=longlat +datum=WGS84'))
line2 <- gIntersection(circles.prj, sewage[sewage$id2 == circles.prj$ID, ], byid=c(TRUE, TRUE))
line2$drainID <- pts.neigh.drain.sp$ID2[i]
line2$iteration <- i
sewage.part <- rbind(sewage.part, line2)
}
# delete initial entries from above
circles.prj1 <- circles.prj1[!circles.prj1$iteration == 99, ]
sewage.part <<- sewage.part[!sewage.part$iteration == 99, ]
# add drain levels
sewage.part.length.df <- left_join(sewage.part.length.df, drain.levels, by="drain")
sewage.part.length.df$iteration <- NULL
# add lenghts of all drains to start section for each iteration until endpoint reached
sewage.total.df <- data.frame("length"=c(), "drain"=c(), "level"=c(), "iteration"=c())
for (i in 1:length(sewage.part.length.df[, 1])){
nr <- sewage.part.length.df$drain[i]
name <- paste0("p", sprintf("%02d", nr))
sewage.t.length.df <- rbind(get(name), sewage.part.length.df[i, ])
sewage.t.length.df$iteration <- i
sewage.total.df <- rbind(sewage.total.df, sewage.t.length.df)
}
sewage.total.df
}
df <- point2end(neighbcoord)
plot(sewage, col = "lightblue", axes=TRUE)
plot(circles.prj1[circles.prj1$iteration == 5, ], axes=TRUE, add=TRUE)
plot(circles.prj1[circles.prj1$iteration == 7, ], axes=TRUE, add=TRUE)
plot(sewage, col = "lightblue", axes=TRUE)
for (i in 1:length(pts.neigh.drain)){
point <- i
df[df$iteration == point, ]
plot.lines <- df[df$iteration == point, ]$drain
max <- length(plot.lines)
plot.lines.reg <- plot.lines[-max]
png(paste0(getwd(), "/plots1/", paste0("map_", i, ".png") ))
plot(sewage, col = "lightblue", axes=TRUE)
points(pts.neighb.sp[pts.neighb.sp$ID==point, ], col="blue", pch=20, cex=1)
points(pts.neigh.drain[pts.neigh.drain$ID==point, ], col="orange", pch=10, cex=1) #closest point to drain
plot(sewage.part[sewage.part$iteration == point, ] , col = "blue", axes=TRUE, add=TRUE)
for (i in plot.lines.reg){
plot(sewage[sewage$id2 == i, ], col = "blue", axes=TRUE, add=TRUE)
}
dev.off()
}
# preset options:
# calculate start and end points of each line segment ----
# all coordinates of each point for each line
linepoints <- lapply(slot(sewage, "lines"),
function(x) lapply(slot(x, "Lines"), function(y) slot(y, "coords")))
# select endpoints of each line == intersections of drains sections
# for some reason for drain 15 and 25, the endpoints are at the beginning of the df, therefore
#   head() is used
pts.drain.end <- data.frame("lon" = c(NA), "lat" = c(NA))
for (i in 1:length(linepoints)) {
if (i == 15 | i == 25 | i == 7 | i == 8){
pts.drain.end[i, ] <- head(data.frame(linepoints[i]), 1)
} else {
pts.drain.end[i, ] <- tail(data.frame(linepoints[i]), 1)
}
}
pts.drain.end$drain <- c(1:31)
rownames(pts.drain.end) <- c(1:31)
# pts beginning of drain
pts.drain.start <- data.frame("lon" = c(-NA), "lat" = c(NA))
for (i in 1:length(linepoints)) {
if (i == 15 | i == 25 | i ==  7 | i == 8){
pts.drain.start[i, ] <- tail(data.frame(linepoints[i]), 1)
} else {
pts.drain.start[i, ] <- head(data.frame(linepoints[i]), 1)
}
}
pts.drain.start$drain <- c(1:31)
rownames(pts.drain.start) <- c(1:31)
#***********************************************************************************************
# # calculate length of each drain part ----
# pts.drain.end #end point
# pts.drain.start #start point
# length of each drain
pts.drain.end.sp <- SpatialPointsDataFrame(pts.drain.end[c("lon", "lat")],
data.frame(ID=seq(1:nrow(pts.drain.end))),
proj4string=CRS("+proj=longlat +datum=WGS84"))
pts.drain.end.prj <- spTransform(pts.drain.end.sp, CRS("+init=epsg:32630"))
pts.drain.start.sp <- SpatialPointsDataFrame(pts.drain.start[c("lon", "lat")],
data.frame(ID=seq(1:nrow(pts.drain.start))),
proj4string=CRS("+proj=longlat +datum=WGS84"))
pts.drain.start.prj <- spTransform(pts.drain.start.sp, CRS("+init=epsg:32630"))
sewage.length.df <- data.frame("length" = c(NA), "drain" = c(NA))
for (i in 1:length(sewage.prj)){
d <- gDistance(pts.drain.end.prj[i, ], pts.drain.start.prj[i, ]) #d of beg and end point of drain
circles.prj <- gBuffer(pts.drain.end.prj[i,], width=d, byid=TRUE)
sewage.length.df[i, ] <- c(line.length(sewage.prj[i, ], circles.prj), i)
}
# add levels to drains
a <- c(1:12)
b <- c(13:27)
c <- c(28:31)
drain.levels <- data.frame("drain"=c(a,b,c),
"level"=c(rep(1,length(a)),rep(2,length(b)), rep(3,length(c))))
sewage.length.df <- left_join(sewage.length.df, drain.levels, by="drain")
rm(a,b,c)
# # alternative way of measuring length of all line segments
# sewage.length.df$test2 <- SpatialLinesLengths(sewage.prj)
# sewage.length.df$test3 <- sewage.length.df$test2 - sewage.length.df$length
#***********************************************************************************************
# function
point2end <- function(neighbcoord){
# connections of each drain to reach end point
p01 <- sewage.length.df %>% filter(drain %in% c( ))
p02 <- sewage.length.df %>% filter(drain %in% c(1))
p03 <- sewage.length.df %>% filter(drain %in% c(1:2))
p04 <- sewage.length.df %>% filter(drain %in% c(1:3))
p05 <- sewage.length.df %>% filter(drain %in% c(1:4))
p06 <- sewage.length.df %>% filter(drain %in% c(1:5))
p07 <- sewage.length.df %>% filter(drain %in% c(1:6))
p08 <- sewage.length.df %>% filter(drain %in% c(1:7))
p09 <- sewage.length.df %>% filter(drain %in% c(1:8))
p10 <- sewage.length.df %>% filter(drain %in% c(1:9))
p11 <- sewage.length.df %>% filter(drain %in% c(1:10))
p12 <- sewage.length.df %>% filter(drain %in% c(1:11))
p13 <- sewage.length.df %>% filter(drain %in% c(1))
p14 <- sewage.length.df %>% filter(drain %in% c(1:2))
p15 <- sewage.length.df %>% filter(drain %in% c(1:3))
p16 <- sewage.length.df %>% filter(drain %in% c(1:4))
p17 <- sewage.length.df %>% filter(drain %in% c(1:4, 16))
p18 <- sewage.length.df %>% filter(drain %in% c(1:4, 16:17))
p19 <- sewage.length.df %>% filter(drain %in% c(1:4, 16:18))
p20 <- sewage.length.df %>% filter(drain %in% c(1:5))
p21 <- sewage.length.df %>% filter(drain %in% c(1:5, 20))
p22 <- sewage.length.df %>% filter(drain %in% c(1:6))
p23 <- sewage.length.df %>% filter(drain %in% c(1:7))
p24 <- sewage.length.df %>% filter(drain %in% c(1:8))
p25 <- sewage.length.df %>% filter(drain %in% c(1:9))
p26 <- sewage.length.df %>% filter(drain %in% c(1:10))
p27 <- sewage.length.df %>% filter(drain %in% c(1:11))
p28 <- sewage.length.df %>% filter(drain %in% c(1:5, 20))
p29 <- sewage.length.df %>% filter(drain %in% c(1:4, 16))
p30 <- sewage.length.df %>% filter(drain %in% c(1:4, 16:17))
p31 <- sewage.length.df %>% filter(drain %in% c(1:4, 16:18))
#***********************************************************************************************
pts.neighb.sp <<- SpatialPointsDataFrame(neighbcoord[, c("lon", "lat")],
data.frame(ID=seq(1:nrow(neighbcoord))),
proj4string=CRS("+proj=longlat +datum=WGS84"))
# distance to sewage (shortest way to line), ID2: feature line intersects with = drain ID
dist2sewagedf <- data.frame("distance" = c(NA),"lon" = c(NA), "lat" = c(NA), "ID2" = c(NA))
# distance + coordinates of intersection + drain ID
for (i in 1:length(neighbcoord[ ,1])) {
dist2sewagedf[i, ] <- rbind(dist2Line(neighbcoord[i, c("lon", "lat")], sewage))
}
pts.neigh.drain <<- SpatialPointsDataFrame(dist2sewagedf[c("lon", "lat")],
data.frame(ID=seq(1:nrow(dist2sewagedf)), ID2 = dist2sewagedf$ID2),
proj4string=CRS("+proj=longlat +datum=WGS84"))
pts.neigh.drain.sp <<- spTransform(pts.neigh.drain, CRS( "+init=epsg:32630" ))
# calculate each small part of id'd section. from intersection to end point of section.
sewage.part.length.df <- data.frame("length" = c(NA), "drain" = c(NA), "iteration" = c(NA))
#setup circle/ line to create spatial polygons/ lines data frame & then later delete this first entry
circles.prj1 <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[1],], width=d, byid=TRUE)
circles.prj1 <- spTransform(circles.prj1, CRS('+proj=longlat +datum=WGS84'))
circles.prj1$iteration <- 99
sewage.part <- gIntersection(circles.prj1[1,], sewage[sewage$id2 == circles.prj1$ID[1], ], byid=c(TRUE, TRUE))
sewage.part$drainID <- 99
sewage.part$iteration <- 99
for (i in 1:length(pts.neigh.drain)){
d <- gDistance(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i], ], pts.neigh.drain.sp[i, ])
circles.prj <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i],], width=d, byid=TRUE)
sewage.part.length.df[i, ] <- c(line.length(sewage.prj[pts.neigh.drain.sp$ID2[i], ], circles.prj),
pts.neigh.drain.sp$ID2[i], i)
circles.prj <- spTransform(circles.prj, CRS('+proj=longlat +datum=WGS84'))
circles.prj$iteration <- i
circles.prj1 <- rbind(circles.prj1, circles.prj)
d <- gDistance(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i], ], pts.neigh.drain.sp[i, ])
circles.prj <- gBuffer(pts.drain.end.prj[pts.neigh.drain.sp$ID2[i],], width=d, byid=TRUE)
circles.prj <- spTransform(circles.prj, CRS('+proj=longlat +datum=WGS84'))
line2 <- gIntersection(circles.prj, sewage[sewage$id2 == circles.prj$ID, ], byid=c(TRUE, TRUE))
line2$drainID <- pts.neigh.drain.sp$ID2[i]
line2$iteration <- i
sewage.part <- rbind(sewage.part, line2)
}
# delete initial entries from above
circles.prj1 <- circles.prj1[!circles.prj1$iteration == 99, ]
sewage.part <<- sewage.part[!sewage.part$iteration == 99, ]
# add drain levels
sewage.part.length.df <- left_join(sewage.part.length.df, drain.levels, by="drain")
sewage.part.length.df$iteration <- NULL
# add lenghts of all drains to start section for each iteration until endpoint reached
sewage.total.df <- data.frame("length"=c(), "drain"=c(), "level"=c(), "iteration"=c())
for (i in 1:length(sewage.part.length.df[, 1])){
nr <- sewage.part.length.df$drain[i]
name <- paste0("p", sprintf("%02d", nr))
sewage.t.length.df <- rbind(get(name), sewage.part.length.df[i, ])
sewage.t.length.df$iteration <- i
sewage.total.df <- rbind(sewage.total.df, sewage.t.length.df)
}
sewage.total.df
}
df <- point2end(neighbcoord)
plot(sewage, col = "lightblue", axes=TRUE)
for (i in 1:length(pts.neigh.drain)){
point <- i
df[df$iteration == point, ]
plot.lines <- df[df$iteration == point, ]$drain
max <- length(plot.lines)
plot.lines.reg <- plot.lines[-max]
png(paste0(getwd(), "/plots1/", paste0("map_", i, ".png") ))
plot(sewage, col = "lightblue", axes=TRUE)
points(pts.neighb.sp[pts.neighb.sp$ID==point, ], col="blue", pch=20, cex=1)
points(pts.neigh.drain[pts.neigh.drain$ID==point, ], col="orange", pch=10, cex=1) #closest point to drain
plot(sewage.part[sewage.part$iteration == point, ] , col = "blue", axes=TRUE, add=TRUE)
for (i in plot.lines.reg){
plot(sewage[sewage$id2 == i, ], col = "blue", axes=TRUE, add=TRUE)
}
dev.off()
}
