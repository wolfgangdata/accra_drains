{
    "collab_server" : "",
    "contents" : "#***********************************************************************************************\n# Drains & Neighborhoods - Accra, Ghana\n#***********************************************************************************************\n#  [1] calculate length of drains\n#       write: drains_order.csv\n#  [2] calculate order of drains for travel from neighborhood to endpoint\n#  [3] calculate pathogen count for neighborhood and each following drain/ point\n#       write: pahtogens_drain_all_new.csv\n#  [ ] visualizations in 06_ggplot_plotting.R\n#\n#***********************************************************************************************\n# Note: data abreviations\n# .sp  ... spatially adjusted with spTransform\n# .prj ... projected with CRS(\"+init=epsg:32630\")\n#***********************************************************************************************\n\npackages <- c(\"dplyr\", \"rgdal\", \"raster\", \"rgeos\", \"geosphere\", \"deSolve\")\nlapply(packages, library, character.only = TRUE)\n\nsetwd(\"H:/GitHub/accra_drains/\")\n\n\n# load data ----\n# waterways\nsewage <- shapefile(paste0(getwd(), \"/shapefiles/waterways/\", \"accra_waterw_con_ed_level_4.shp\"))\nsewage <- spTransform(sewage, CRS(\"+proj=longlat +datum=WGS84\"))\nsewage <- sewage[order(sewage@data$id2), ]\nsewage.prj <- spTransform(sewage, CRS(\"+init=epsg:32630\"))\n\n# neighborhood weighted mid point\nneighb <- read.csv(paste0(getwd(), \"/data/\", \"neighborhoods_all_clean.csv\"), sep = \",\")\nneighbcoord <- read.csv(paste0(getwd(), \"/data/\", \"points_coordinates_output.csv\"), sep = \",\")\n\n# # neighborhood shape file\n# ama <- shapefile(paste0(getwd(), \"/shapefiles/neighborhood/\", \"AMA_projected.shp\"))\n# ama <- spTransform(ama, CRS(\"+proj=longlat +datum=WGS84\"))\n# #***********************************************************************************************\n\nsource(paste0(getwd(), \"/\", \"01_helper_functions.R\"))\nsource(paste0(getwd(), \"/\", \"02_calc_options.R\"))\nsource(paste0(getwd(), \"/\", \"03_length_calc.R\"))\n\n# run - length of drain travel calculation\ndf <- point2end(neighbcoord)\n\ndf <- df[with(df, order(iteration, -drain)), ]\nwrite.csv(df, paste0(getwd(), \"/data/\", \"drains_order.csv\"), row.names = F)\n\n\n#***********************************************************************************************\n#***********************************************************************************************\n# Endemic Part ----\nsource(paste0(getwd(), \"/\", \"04_endemic_model.R\"))\n\n# Note: neighborhood to drain: liquid sewage + decay\n\n# we assume a water/ drain flow rate of 10,000m per day\n# 10,000m/day = 0.417km/h = 0.116m/sec\nv <- 10000\ndf$time <- df$length / v * 24\n\n# assumption of flow rate from neighborhood to drain 1,000m per day\nv.d0 <- 1000\ndist2sewagedf$time <- (dist2sewagedf$distance / v.d0)  * 24 \n#***********************************************************************************************\n\n\n# pathogens for each neighborhood for 1000 days\npathog.neighb <- c()\npathog.neighb.list <- list()\nn.pop <- neighb$p_total\n\nfor (i in 1:length(n.pop)){\n        pathog.neighb <- patho.count(N.pop=n.pop[i], beta=0.04, recovery=1/30, death=0.001, \n                                birth=0.001, days=1000, N.shed=10^7, r=5, p=1/3)\n        pathog.neighb.list[[i]] <- pathog.neighb\n}\n\nN0df <- matrix(unlist(pathog.neighb.list), ncol = nrow(neighb), byrow = F) #N0\n#***********************************************************************************************\n\n\n# liquid waste and time for d0 ... calculate N1\nliquid.waste <- neighb$waste_liquid_sewage\n\n# create matrix for all adjustement factors for all neighborhoods\nadjust.fac.matrix <- matrix(ncol = length(N0df[1, ]), nrow = 1000)\nfor (i in 1:length(N0df[1, ])) {\n        adjust.fac.matrix[, i] <- rbeta(length(N0df[, i]), 1, 5)\n}\n\n###\ndata.list <- list()\nfor (u in 1:length(N0df[1, ])) {\n        drains <- df[df$iteration == u, ]\n        ndrains <- nrow(drains) # df$drain[df$iteration == u]\n        ncolumns <- sum(nrow(drains)+2)\n        t0 <- dist2sewagedf$time[u]\n\n        data <- data.frame(matrix(ncol=ncolumns, nrow=1000))\n        # number of drains + neighborhood concentration --- defines number of columns\n        for (i in 1:sum(nrow(drains)+2)){ #one neighborhood\n                if (i == 1){\n                        data[, i] <- N0df[, u]\n                }\n                if (i == 2){\n                        data[, i] <- N_next(N0df[, u], t0,\n                                            liquid.waste[u], adj_fac = adjust.fac.matrix[, u])\n                } \n                if (i > 2){\n                        data[, i] <- N_next(N0df[, u], t0 + sum(drains$time[1:sum(i-2)]),\n                                            liquid.waste[u], adj_fac = adjust.fac.matrix[, u])\n                }\n        }\n        colnames(data) <- c(\"N0\", paste(\"N\", 1:(nrow(drains)+1), sep=\"\"))\n        data.list[[u]] <- data\n        ###\n}\n#***********************************************************************************************\n\n\n# calculate/ aggregate all the drains/points \n# transpose matrix and add columns to identify drain\npathog.drains <- data.frame()\n\nfor (u in 1:length(N0df[1, ])){\n        dat <- data.list[[u]]\n        # dat <- data.list[[u]][,-c(1,2)] #delete N0 and N1\n        dat <- data.frame(t(dat)) \n        dat$point <- rownames(dat)\n        dat$drain <- c(0, 0, df$drain[df$iteration == u])\n        dat$time <- c(0, dist2sewagedf$time[u], df$time[df$iteration == u])\n        dat$meters <- c(0, dist2sewagedf$distance[u], df$length[df$iteration == u])\n        dat$iteration <- u\n        dat <- dat %>%\n                dplyr::select(drain, point, time, meters, iteration, everything())\n        pathog.drains <- rbind(pathog.drains, dat)\n}\n\nrownames(pathog.drains) <- NULL\n#***********************************************************************************************\n\npathog.drains$time <- round(pathog.drains$time, 2)\npathog.drains$meters <- round(pathog.drains$meters, 2)\n\nwrite.csv(pathog.drains, paste0(getwd(), \"/data/\", \"pahtogens_drain_all_new.csv\"), row.names = F)\n\n# # pathogen in drain per day\n# summary <- pathog.drains %>% dplyr::select(-c(point, time, meters, iteration) ) %>% group_by(drain) %>%\n#         filter(!drain==0) %>% summarise_each(funs(sum))\n\n",
    "created" : 1518631038688.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "950674505",
    "id" : "28622949",
    "lastKnownWriteTime" : 1505495281,
    "last_content_update" : 1505495281,
    "path" : "H:/GitHub/accra_drains/05_pathog_calc.R",
    "project_path" : "05_pathog_calc.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}